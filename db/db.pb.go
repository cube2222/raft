// Code generated by protoc-gen-go. DO NOT EDIT.
// source: db.proto

/*
Package db is a generated protocol buffer package.

It is generated from these files:
	db.proto

It has these top-level messages:
	DocumentRequest
	EncodedDocument
*/
package db

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DocumentRequest struct {
	Collection string `protobuf:"bytes,1,opt,name=collection" json:"collection,omitempty"`
	Id         string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *DocumentRequest) Reset()                    { *m = DocumentRequest{} }
func (m *DocumentRequest) String() string            { return proto.CompactTextString(m) }
func (*DocumentRequest) ProtoMessage()               {}
func (*DocumentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DocumentRequest) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *DocumentRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type EncodedDocument struct {
	Data     []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Exists   bool   `protobuf:"varint,2,opt,name=exists" json:"exists,omitempty"`
	Revision int64  `protobuf:"varint,3,opt,name=revision" json:"revision,omitempty"`
}

func (m *EncodedDocument) Reset()                    { *m = EncodedDocument{} }
func (m *EncodedDocument) String() string            { return proto.CompactTextString(m) }
func (*EncodedDocument) ProtoMessage()               {}
func (*EncodedDocument) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EncodedDocument) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *EncodedDocument) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

func (m *EncodedDocument) GetRevision() int64 {
	if m != nil {
		return m.Revision
	}
	return 0
}

func init() {
	proto.RegisterType((*DocumentRequest)(nil), "db.DocumentRequest")
	proto.RegisterType((*EncodedDocument)(nil), "db.EncodedDocument")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DB service

type DBClient interface {
	GetDocument(ctx context.Context, in *DocumentRequest, opts ...grpc.CallOption) (*EncodedDocument, error)
}

type dBClient struct {
	cc *grpc.ClientConn
}

func NewDBClient(cc *grpc.ClientConn) DBClient {
	return &dBClient{cc}
}

func (c *dBClient) GetDocument(ctx context.Context, in *DocumentRequest, opts ...grpc.CallOption) (*EncodedDocument, error) {
	out := new(EncodedDocument)
	err := grpc.Invoke(ctx, "/db.DB/GetDocument", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DB service

type DBServer interface {
	GetDocument(context.Context, *DocumentRequest) (*EncodedDocument, error)
}

func RegisterDBServer(s *grpc.Server, srv DBServer) {
	s.RegisterService(&_DB_serviceDesc, srv)
}

func _DB_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.DB/GetDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServer).GetDocument(ctx, req.(*DocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "db.DB",
	HandlerType: (*DBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDocument",
			Handler:    _DB_GetDocument_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}

func init() { proto.RegisterFile("db.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 187 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x48, 0x49, 0xd2, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4a, 0x49, 0x52, 0x72, 0xe4, 0xe2, 0x77, 0xc9, 0x4f, 0x2e,
	0xcd, 0x4d, 0xcd, 0x2b, 0x09, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x92, 0xe3, 0xe2, 0x4a,
	0xce, 0xcf, 0xc9, 0x49, 0x4d, 0x2e, 0xc9, 0xcc, 0xcf, 0x93, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c,
	0x42, 0x12, 0x11, 0xe2, 0xe3, 0x62, 0xca, 0x4c, 0x91, 0x60, 0x02, 0x8b, 0x33, 0x65, 0xa6, 0x28,
	0x45, 0x72, 0xf1, 0xbb, 0xe6, 0x25, 0xe7, 0xa7, 0xa4, 0xa6, 0xc0, 0x4c, 0x12, 0x12, 0xe2, 0x62,
	0x49, 0x49, 0x2c, 0x49, 0x04, 0x6b, 0xe6, 0x09, 0x02, 0xb3, 0x85, 0xc4, 0xb8, 0xd8, 0x52, 0x2b,
	0x32, 0x8b, 0x4b, 0x8a, 0xc1, 0x5a, 0x39, 0x82, 0xa0, 0x3c, 0x21, 0x29, 0x2e, 0x8e, 0xa2, 0xd4,
	0xb2, 0xcc, 0x62, 0x90, 0x65, 0xcc, 0x0a, 0x8c, 0x1a, 0xcc, 0x41, 0x70, 0xbe, 0x91, 0x2d, 0x17,
	0x93, 0x8b, 0x93, 0x90, 0x39, 0x17, 0xb7, 0x7b, 0x6a, 0x09, 0xdc, 0x70, 0x61, 0xbd, 0x94, 0x24,
	0x3d, 0x34, 0x47, 0x4b, 0x81, 0x05, 0xd1, 0x9c, 0x91, 0xc4, 0x06, 0xf6, 0xa7, 0x31, 0x20, 0x00,
	0x00, 0xff, 0xff, 0xe0, 0x6c, 0xae, 0x5d, 0xf3, 0x00, 0x00, 0x00,
}
